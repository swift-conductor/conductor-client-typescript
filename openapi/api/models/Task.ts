/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { TaskDef } from '../models/TaskDef';
import { WorkflowTask } from '../models/WorkflowTask';
import { HttpFile } from '../http/http';

export class Task {
    'taskType'?: string;
    'status'?: TaskStatusEnum;
    'inputData'?: { [key: string]: any; };
    'referenceTaskName'?: string;
    'retryCount'?: number;
    'seq'?: number;
    'correlationId'?: string;
    'pollCount'?: number;
    'taskDefName'?: string;
    'scheduledTime'?: number;
    'startTime'?: number;
    'endTime'?: number;
    'updateTime'?: number;
    'startDelayInSeconds'?: number;
    'retriedTaskId'?: string;
    'retried'?: boolean;
    'executed'?: boolean;
    'callbackFromWorker'?: boolean;
    'responseTimeoutSeconds'?: number;
    'workflowInstanceId'?: string;
    'workflowType'?: string;
    'taskId'?: string;
    'reasonForIncompletion'?: string;
    'callbackAfterSeconds'?: number;
    'workerId'?: string;
    'outputData'?: { [key: string]: any; };
    'workflowTask'?: WorkflowTask;
    'domain'?: string;
    'rateLimitPerFrequency'?: number;
    'rateLimitFrequencyInSeconds'?: number;
    'externalInputPayloadStoragePath'?: string;
    'externalOutputPayloadStoragePath'?: string;
    'workflowPriority'?: number;
    'executionNameSpace'?: string;
    'isolationGroupId'?: string;
    'iteration'?: number;
    'subWorkflowId'?: string;
    'subworkflowChanged'?: boolean;
    'taskDefinition'?: TaskDef;
    'queueWaitTime'?: number;
    'loopOverTask'?: boolean;

    static readonly discriminator: string | undefined = undefined;

    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [
        {
            "name": "taskType",
            "baseName": "taskType",
            "type": "string",
            "format": ""
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "TaskStatusEnum",
            "format": ""
        },
        {
            "name": "inputData",
            "baseName": "inputData",
            "type": "{ [key: string]: any; }",
            "format": ""
        },
        {
            "name": "referenceTaskName",
            "baseName": "referenceTaskName",
            "type": "string",
            "format": ""
        },
        {
            "name": "retryCount",
            "baseName": "retryCount",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "seq",
            "baseName": "seq",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "correlationId",
            "baseName": "correlationId",
            "type": "string",
            "format": ""
        },
        {
            "name": "pollCount",
            "baseName": "pollCount",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "taskDefName",
            "baseName": "taskDefName",
            "type": "string",
            "format": ""
        },
        {
            "name": "scheduledTime",
            "baseName": "scheduledTime",
            "type": "number",
            "format": "int64"
        },
        {
            "name": "startTime",
            "baseName": "startTime",
            "type": "number",
            "format": "int64"
        },
        {
            "name": "endTime",
            "baseName": "endTime",
            "type": "number",
            "format": "int64"
        },
        {
            "name": "updateTime",
            "baseName": "updateTime",
            "type": "number",
            "format": "int64"
        },
        {
            "name": "startDelayInSeconds",
            "baseName": "startDelayInSeconds",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "retriedTaskId",
            "baseName": "retriedTaskId",
            "type": "string",
            "format": ""
        },
        {
            "name": "retried",
            "baseName": "retried",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "executed",
            "baseName": "executed",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "callbackFromWorker",
            "baseName": "callbackFromWorker",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "responseTimeoutSeconds",
            "baseName": "responseTimeoutSeconds",
            "type": "number",
            "format": "int64"
        },
        {
            "name": "workflowInstanceId",
            "baseName": "workflowInstanceId",
            "type": "string",
            "format": ""
        },
        {
            "name": "workflowType",
            "baseName": "workflowType",
            "type": "string",
            "format": ""
        },
        {
            "name": "taskId",
            "baseName": "taskId",
            "type": "string",
            "format": ""
        },
        {
            "name": "reasonForIncompletion",
            "baseName": "reasonForIncompletion",
            "type": "string",
            "format": ""
        },
        {
            "name": "callbackAfterSeconds",
            "baseName": "callbackAfterSeconds",
            "type": "number",
            "format": "int64"
        },
        {
            "name": "workerId",
            "baseName": "workerId",
            "type": "string",
            "format": ""
        },
        {
            "name": "outputData",
            "baseName": "outputData",
            "type": "{ [key: string]: any; }",
            "format": ""
        },
        {
            "name": "workflowTask",
            "baseName": "workflowTask",
            "type": "WorkflowTask",
            "format": ""
        },
        {
            "name": "domain",
            "baseName": "domain",
            "type": "string",
            "format": ""
        },
        {
            "name": "rateLimitPerFrequency",
            "baseName": "rateLimitPerFrequency",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "rateLimitFrequencyInSeconds",
            "baseName": "rateLimitFrequencyInSeconds",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "externalInputPayloadStoragePath",
            "baseName": "externalInputPayloadStoragePath",
            "type": "string",
            "format": ""
        },
        {
            "name": "externalOutputPayloadStoragePath",
            "baseName": "externalOutputPayloadStoragePath",
            "type": "string",
            "format": ""
        },
        {
            "name": "workflowPriority",
            "baseName": "workflowPriority",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "executionNameSpace",
            "baseName": "executionNameSpace",
            "type": "string",
            "format": ""
        },
        {
            "name": "isolationGroupId",
            "baseName": "isolationGroupId",
            "type": "string",
            "format": ""
        },
        {
            "name": "iteration",
            "baseName": "iteration",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "subWorkflowId",
            "baseName": "subWorkflowId",
            "type": "string",
            "format": ""
        },
        {
            "name": "subworkflowChanged",
            "baseName": "subworkflowChanged",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "taskDefinition",
            "baseName": "taskDefinition",
            "type": "TaskDef",
            "format": ""
        },
        {
            "name": "queueWaitTime",
            "baseName": "queueWaitTime",
            "type": "number",
            "format": "int64"
        },
        {
            "name": "loopOverTask",
            "baseName": "loopOverTask",
            "type": "boolean",
            "format": ""
        }    ];

    static getAttributeTypeMap() {
        return Task.attributeTypeMap;
    }

    public constructor() {
    }
}


export enum TaskStatusEnum {
    InProgress = 'IN_PROGRESS',
    Canceled = 'CANCELED',
    Failed = 'FAILED',
    FailedWithTerminalError = 'FAILED_WITH_TERMINAL_ERROR',
    Completed = 'COMPLETED',
    CompletedWithErrors = 'COMPLETED_WITH_ERRORS',
    Scheduled = 'SCHEDULED',
    TimedOut = 'TIMED_OUT',
    Skipped = 'SKIPPED'
}

